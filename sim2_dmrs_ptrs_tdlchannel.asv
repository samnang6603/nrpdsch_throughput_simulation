%% Simple barebone 5G NR PDSCH End-to-End simulation without HARQ, Precode


%% Data
clear
clc
%rng(3)
x = imread('cameraman.tif');
xbin = int8(int2bit(x(:),8));
data_len = length(xbin);
xbin_hat = zeros(size(xbin),'like',xbin);

%% Parameter Settings
SNR = 20;
nlayers = 1;
modulation = '16QAM';
targetcoderate = 3/4;
rv = 0;
numblkerr = 0;
numbiterr = 0;

%% Parameter Configurations

% Set Carrier Param
carrier = nrCarrierConfig;
info_waveform = nrOFDMInfo(carrier);

% Set PDSCH Param
pdsch = nrPDSCHConfig;
pdsch.NumLayers = nlayers;
pdsch.Modulation = modulation;
pdsch.NID = carrier.NCellID;
[pdschIndices,pdschIndicesInfo] = nrPDSCHIndices(carrier,pdsch);
q = 0; % single codeword transmission
[pdsch_seq,pdsch_cinit] = nrPDSCHPRBS(pdsch.NID,pdsch.RNTI,q,pdschIndicesInfo.G); % PRBS seq for PDSCH Scrambler TS 5.2.1

% Set DM-RS Param
dmrs = pdsch.DMRS;
dmrs_sym = nrPDSCHDMRS(carrier,pdsch);
dmrsIndices = nrPDSCHDMRSIndices(carrier,pdsch);

% Set PT-RS Param
ptrs = pdsch.PTRS;
ptrs_sym = nrPDSCHPTRS(carrier,pdsch);
pdsch.EnablePTRS = 0;

% Set PDSCH Resource Grid
NTx = 1;
pdschGrid = nrResourceGrid(carrier,NTx,OutputDataType='double');

% Calculate Transport Block size
trBlkSizes = nrTBS(pdsch.Modulation,pdsch.NumLayers,numel(pdsch.PRBSet),pdschIndicesInfo.NREPerPRB,targetcoderate);
chunks = data_len/trBlkSizes;
numchunks = ceil(chunks); % or total number of transport block
numzeropad = fix((1 - abs(chunks - floor(chunks)))*trBlkSizes);
xbin = [xbin; zeros(numzeropad,1,'int8')];

% Set DLSCH Param
info_dlsch = nrDLSCHInfo(trBlkSizes,targetcoderate);  % info
enc_dlsch = nrDLSCH;       % encode
enc_dlsch.TargetCodeRate = targetcoderate;
dec_dlsch = nrDLSCHDecoder; % decode
dec_dlsch.TargetCodeRate = targetcoderate;
dec_dlsch.TransportBlockLength = trBlkSizes;

% Set Channel Model Param
channel = nrTDLChannel;
channel.DelayProfile = 'TDL-C';
channel.DelaySpread = 300e-9;
channel.MaximumDopplerShift = 50;

%% Processes

for m = 1:numchunks
    xbinchunk = xbin((m-1)*trBlkSizes+1:(m-1)*trBlkSizes+trBlkSizes);
    setTransportBlock(enc_dlsch,xbinchunk);

    % DLSCH Encoding
    codedTrBlocks = enc_dlsch(pdsch.Modulation,pdsch.NumLayers,...
        pdschIndicesInfo.G,rv);
    % Alternatively, DLSCH Encoding unfoiled
    % codedTrBlocks1 = nrCRCEncode(xbinchunk,info_dlsch.CRC);
    % codedTrBlocks1 = nrCodeBlockSegmentLDPC(codedTrBlocks1,info_dlsch.BGN);
    % codedTrBlocks1 = nrLDPCEncode(codedTrBlocks1,info_dlsch.BGN);
    % codedTrBlocks1 = nrRateMatchLDPC(codedTrBlocks1,pdschIndicesInfo.G,rv,modulation,nlayers);

    % PDSCH Encoding
    txsym = nrPDSCH(carrier,pdsch,codedTrBlocks); % Scramble > Modulate > LayerMap
    % Alternatively, PDSCH Encoding unfoiled
    % pdsch_scram_bit = mod(codedTrBlocks + int8(pdsch_seq),2); % PDSCH Scrambling TS 7.3.1.1
    % txsym1 = nrSymbolModulate(pdsch_scram_bit,modulation,OutputDataType='double');
    % txsym1 = nrLayerMap(pdsch_scram_bit,nlayers); % for 1 layer or 1 Tx, this does nothing but included for completeness

    % Waveform Generation
    pdschGrid(pdschIndices) = txsym;
    [txWaveform,info_waveform] = nrOFDMModulate(carrier,pdschGrid);

    % Add noise
    %txsymn = awgn(txsym,SNR,'measured');
    rxWaveform = awgn(txWaveform,SNR,'measured');

    % Waveform Demodulate
    pdschGrid_hat = nrOFDMDemodulate(carrier,rxWaveform);
    rxsym = pdschGrid_hat(pdschIndices);

    % PDSCH Decode
    rxcodedTrBlocks = nrPDSCHDecode(rxsym,pdsch.Modulation,pdsch.NID,pdsch.RNTI);
    rxSoftBits = rxcodedTrBlocks{1};
    % Alternatively, PDSCH Decoding unfoiled
    rxsym_layer_demap = nrLayerDemap(rxsym);
    rx_scram_bit = nrSymbolDemodulate(rxsym_layer_demap{1},modulation,'DecisionType','soft'); 
    rx_descram_sign = 1.0 - 2.0*double(pdsch_seq);
    rxSoftBits1 = rx_scram_bit.*rx_descram_sign; % XOR again reverse the scrambling

    % DLSCH Decode
    [xbinchunk_hat,blkerr] = dec_dlsch(rxSoftBits,pdsch.Modulation,pdsch.NumLayers,rv);
    % Alternatively, DLSCH Decoding unfoiled
    % xbinchunk_hat1 = nrRateRecoverLDPC(rxSoftBits,trBlkSizes,targetcoderate,rv,modulation,nlayers);
    % xbinchunk_hat1 = nrLDPCDecode(xbinchunk_hat1,info_dlsch.BGN,6);
    % xbinchunk_hat1 = nrCodeBlockDesegmentLDPC(xbinchunk_hat1,info_dlsch.BGN,trBlkSizes+info_dlsch.L);
    % xbinchunk_hat1 = nrCRCDecode(xbinchunk_hat1,info_dlsch.CRC);

    numblkerr = numblkerr + double(blkerr);
    numbiterr = numbiterr + sum(xbinchunk~=xbinchunk_hat);

    xbin_hat((m-1)*trBlkSizes+1:(m-1)*trBlkSizes+trBlkSizes) = xbinchunk_hat;

end
bler =  numblkerr/numchunks; % Always equal to 1 for this case of simplied 5G pipeline
ber = numbiterr/data_len;

%% Reassemble image
xbin_hat = xbin_hat(1:data_len);
xhat = bit2int(xbin_hat,8);
xhat = uint8(reshape(xhat,size(x)));
figure
set(gca,'FontSize',14)
sgtitle('Barebone 5G NR Without DM-RS, PT-RS, HARQ')
subplot(121)
imshow(x), title('Transmitted'),set(gca,'FontSize',14)
subplot(122)
imshow(xhat), title('Received'),set(gca,'FontSize',14)
